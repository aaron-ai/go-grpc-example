// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: hello.proto

package bar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SayHelloClient is the client API for SayHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayHelloClient interface {
	Unary(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (SayHello_BidirectionalStreamClient, error)
	ServerStream(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (SayHello_ServerStreamClient, error)
}

type sayHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewSayHelloClient(cc grpc.ClientConnInterface) SayHelloClient {
	return &sayHelloClient{cc}
}

func (c *sayHelloClient) Unary(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, "/SayHello/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayHelloClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (SayHello_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SayHello_ServiceDesc.Streams[0], "/SayHello/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayHelloBidirectionalStreamClient{stream}
	return x, nil
}

type SayHello_BidirectionalStreamClient interface {
	Send(*SayHelloRequest) error
	Recv() (*SayHelloResponse, error)
	grpc.ClientStream
}

type sayHelloBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *sayHelloBidirectionalStreamClient) Send(m *SayHelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sayHelloBidirectionalStreamClient) Recv() (*SayHelloResponse, error) {
	m := new(SayHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sayHelloClient) ServerStream(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (SayHello_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SayHello_ServiceDesc.Streams[1], "/SayHello/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sayHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SayHello_ServerStreamClient interface {
	Recv() (*SayHelloResponse, error)
	grpc.ClientStream
}

type sayHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *sayHelloServerStreamClient) Recv() (*SayHelloResponse, error) {
	m := new(SayHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHelloServer is the server API for SayHello service.
// All implementations must embed UnimplementedSayHelloServer
// for forward compatibility
type SayHelloServer interface {
	Unary(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	BidirectionalStream(SayHello_BidirectionalStreamServer) error
	ServerStream(*SayHelloRequest, SayHello_ServerStreamServer) error
	mustEmbedUnimplementedSayHelloServer()
}

// UnimplementedSayHelloServer must be embedded to have forward compatible implementations.
type UnimplementedSayHelloServer struct {
}

func (UnimplementedSayHelloServer) Unary(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedSayHelloServer) BidirectionalStream(SayHello_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedSayHelloServer) ServerStream(*SayHelloRequest, SayHello_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedSayHelloServer) mustEmbedUnimplementedSayHelloServer() {}

// UnsafeSayHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayHelloServer will
// result in compilation errors.
type UnsafeSayHelloServer interface {
	mustEmbedUnimplementedSayHelloServer()
}

func RegisterSayHelloServer(s grpc.ServiceRegistrar, srv SayHelloServer) {
	s.RegisterService(&SayHello_ServiceDesc, srv)
}

func _SayHello_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayHelloServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SayHello/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayHelloServer).Unary(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SayHello_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SayHelloServer).BidirectionalStream(&sayHelloBidirectionalStreamServer{stream})
}

type SayHello_BidirectionalStreamServer interface {
	Send(*SayHelloResponse) error
	Recv() (*SayHelloRequest, error)
	grpc.ServerStream
}

type sayHelloBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *sayHelloBidirectionalStreamServer) Send(m *SayHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sayHelloBidirectionalStreamServer) Recv() (*SayHelloRequest, error) {
	m := new(SayHelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SayHello_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SayHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SayHelloServer).ServerStream(m, &sayHelloServerStreamServer{stream})
}

type SayHello_ServerStreamServer interface {
	Send(*SayHelloResponse) error
	grpc.ServerStream
}

type sayHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *sayHelloServerStreamServer) Send(m *SayHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SayHello_ServiceDesc is the grpc.ServiceDesc for SayHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayHello",
	HandlerType: (*SayHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _SayHello_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStream",
			Handler:       _SayHello_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _SayHello_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hello.proto",
}
